<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"  
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	   xmlns:context="http://www.springframework.org/schema/context" 
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:tx="http://www.springframework.org/schema/tx" 
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
				           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
				           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
                           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

	
	<!--MQ -->
	<bean id="taskExecutor"
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<!-- 核心线程数，默认为1 -->
		<property name="corePoolSize" value="5" />
		<!-- 最大线程数，默认为Integer.MAX_VALUE -->
		<property name="maxPoolSize" value="5" />
		<!-- 队列最大长度，一般需要设置值>=notifyScheduledMainExecutor.maxNum；默认为Integer.MAX_VALUE -->
		<property name="queueCapacity" value="1000" />
		<!-- 线程池维护线程所允许的空闲时间，默认为60s -->
		<property name="keepAliveSeconds" value="300" />
		<!-- 线程池对拒绝任务（无线程可用）的处理策略，目前只支持AbortPolicy、CallerRunsPolicy；默认为后者 -->
		<property name="rejectedExecutionHandler">
			<!-- AbortPolicy:直接抛出java.util.concurrent.RejectedExecutionException异常 -->
			<!-- CallerRunsPolicy:主线程直接执行该任务，执行完之后尝试添加下一个任务到线程池中，可以有效降低向线程池内添加任务的速度 -->
			<!-- DiscardOldestPolicy:抛弃旧的任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->
			<!-- DiscardPolicy:抛弃当前任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->
			<bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy" />
		</property>
	</bean>
	
	<!--jms 连接池 optimizedAckScheduledAckInterval:消息确认周期 -->
	<bean id="jmsConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory">
		<property name="connectionFactory">
			<bean class="org.apache.activemq.ActiveMQConnectionFactory">
				<property name="brokerURL" value="tcp://120.76.76.191/:61616" />
				<property name="closeTimeout" value="60000" />
				<property name="userName" value="system" />
				<property name="password" value="bangbang" />
				<property name="useAsyncSend" value="true" />
				<!--<property name="optimizeAcknowledge" value="true" /> -->
			</bean>
		</property>
	</bean>

	<!-- Spring JMS Template -->
	<bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
		<property name="connectionFactory">
			<ref local="jmsConnectionFactory" />
		</property>
	</bean>

	<!--queue通道 -->
	<bean id="asyncQueue" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg index="0">
			<value>bangbang</value>
		</constructor-arg>
	</bean>
	<!--topic通道 -->
	<bean id="asyncTopic" name="asyncTopic"
		class="org.apache.activemq.command.ActiveMQTopic">
		<constructor-arg index="0">
			<value>asyncTopic</value>
		</constructor-arg>
	</bean>
	<!--消息接受容器，多线程异步接受消息 -->
 	<bean id="jmsContainer"
		class="org.springframework.jms.listener.DefaultMessageListenerContainer">
		<property name="connectionFactory" ref="jmsConnectionFactory" />
		<property name="destination" ref="asyncTopic" />
		<property name="pubSubDomain" value="true" />
		<property name="messageListener" ref="messageListener" />
		<property name="sessionTransacted" value="false" />
	</bean>
	
        <!--消息接受pojo-->  
	<bean id="messageListener" class="com.jihuiduo.netproxy.mq.TopicListener"></bean> 
	
	<bean id="jmsSenderService" class="com.jihuiduo.netproxy.mq.JmsSenderServiceImpl">
		<property name="jmsTemplate" ref="jmsTemplate"/>
		<property name="destinationQueue" ref="asyncQueue"/>
		<property name="destinationTopic" ref="asyncTopic"/>
	</bean>
</beans>
